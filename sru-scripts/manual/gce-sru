#!/bin/bash
# Manual GCE upgrade and clean install validation Xenial, Bionic, Cosmic
set -ex
SRU_VARS=./sru-scripts/sru-vars.template

if [ ! -f $SRU_VARS ]; then
   echo "Missing config environment file $SRU_VARS."
   exit 1
fi

. $SRU_VARS

parse_args $0 $@
assert_expected_vars PROPOSED_SCRIPT SAMPLE_CLOUDCONFIG SSHOPTS GCE_ZONE \
    NETCFG_FILE
create_samplecloudconfig SAMPLE_CLOUDCONFIG
create_setup_proposed_script
 
echo "### BEGIN $UBUNTU_RELEASE"

case $UBUNTU_RELEASE in
    xenial) family=ubuntu-1604-lts;;
    bionic) family=ubuntu-1804-lts;;
    cosmic) family=ubuntu-1810;;
    disco) family=ubuntu-1904;;
    eoan) family=ubuntu-1910;;
    focal) family=ubuntu-2004-lts;;
    *) echo "!! UPDATE FAMILY CASE STATEMENT !!"; exit 1;;
esac

gcloud compute instances create $UBUNTU_RELEASE-sru-test --image-family $family --image-project ubuntu-os-cloud-devel --metadata-from-file user-data=${SAMPLE_CLOUDCONFIG} --zone=$GCE_ZONE;
VM_IP=$(gcloud compute instances list | grep $UBUNTU_RELEASE-sru | awk '{printf "%s", $5}')

while ! ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init status --wait --long; do
    sleep 5
done

# Capture current state
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- dpkg-query --show cloud-init
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo cat /run/cloud-init/result.json
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- ! grep Trace /var/log/cloud-init.log
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze blame
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze show
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze blame
echo 'Networking config'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cat $NETCFG_FILE

# Upgrade to -proposed cloud-init and reboot
scp "${SSHOPTS[@]}" $PROPOSED_SCRIPT ubuntu@$VM_IP:.
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP sudo bash ./setup_proposed.sh 2>&1 | egrep 'cloud-init'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- dpkg-query --show cloud-init
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo hostname SRU-didnt-work
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo rm -f $NETCFG_FILE
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo cloud-init clean --logs --reboot  || true  # The reboot can cause the ssh command to end abruptly
ssh-keygen -f $HOME/.ssh/known_hosts -R $VM_IP

sleep 10  # Wait for the instance to actually go down
while ! ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init status --wait --long; do
    sleep 5
done

ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- hostname
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- ! grep Trace /var/log/cloud-init.log
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze blame
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze show
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze blame
echo 'After upgrade Networking config'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cat $NETCFG_FILE
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init query --format "'cloud-region: {{cloud_name}}-{{region}}'"
echo "Get cloud-id"
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP cloud-id

echo 'Validating whether metadata is being updated per boot LP:1819913'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- grep 'Update\ datasource' /var/log/cloud-init.log
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP sudo reboot || true  # The reboot can cause the ssh command to end abruptly

sleep 10
while ! ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init status --wait --long; do
    sleep 5
done

echo 'After reboot'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- grep 'Update\ datasource' /var/log/cloud-init.log

gcloud compute instances delete --zone=$GCE_ZONE --quiet $UBUNTU_RELEASE-sru-test
echo "### END $UBUNTU_RELEASE"
