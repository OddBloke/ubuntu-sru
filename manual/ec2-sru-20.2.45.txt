#!/bin/sh

set -e

SRU_SERIES="bionic eoan focal xenial"

# local values
LP_USER=${LP_USER:-"lamoura"}
PRESERVE_INSTANCE=false

# Provide USE_DEV_PPA=1 if we are SRU queue is still unapproved
# This will use our ppa:cloud-init-dev/proposed
if [ "${USE_DEV_PPA:-1}" -eq "0" ]; then
    PROPOSED_SCRIPT=setup_proposed.sh
else
    PROPOSED_SCRIPT=setup_dev_proposed.sh
fi

while [ $# -ne 0 ]; do
	case "$1" in
		# any flag pass through.
		--preserve-instance) PRESERVE_INSTANCE=true;;
		--) shift; break;;
	esac
	shift;
done


# Manual EC2 upgrade and clean install validation
cat > sethostname.yaml <<EOF
## template: jinja
#cloud-config
ssh_import_id: [$LP_USER]
hostname: SRU-worked-{{v1.cloud_name}}
EOF

cat > setup_proposed.sh <<EOF
#/bin/bash
mirror=http://archive.ubuntu.com/ubuntu
echo deb \$mirror \$(lsb_release -sc)-proposed main | tee /etc/apt/sources.list.d/proposed.list
apt-get update -q;
apt-get install -qy cloud-init;
EOF

cat > setup_dev_proposed.sh <<EOF
#/bin/bash
add-apt-repository ppa:cloud-init-dev/proposed -y
apt-get update -q;
apt-get install -qy cloud-init;
EOF

# set -x outputs each commant to standard error, so an easy way to keen an eye
# what's going on while saving a clean log file (stdout only) is using tee(1).
set -x

sshopts="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

run_describe_command() {
    dnsname=$1
    query=$2
    aws ec2 describe-instances --filter "Name=dns-name,Values=${dnsname}" --query $query | jq -r .[]
}

get_ec2_instance_id() {
    dns_name=$1
    dns_name="${dns_name#"ubuntu@"}"
    query='Reservations[].Instances[].InstanceId'
    run_describe_command $dns_name $query
}

terminate_instance() {
    ec2_inst=$1
    if [ "$PRESERVE_INSTANCE" = false ]; then
        echo "deleting instance"
        ec2_inst_id=`get_ec2_instance_id ${ec2_inst}`
        aws ec2 terminate-instances --instance-ids $ec2_inst_id
    else
        echo "Keeping instance active"
    fi
}

get_subnet_id() {
    inst_name=$1
    dns_name="${inst_name#"ubuntu@"}"
    query='Reservations[].Instances[].SubnetId'
    run_describe_command $dns_name $query
}

create_network_interface() {
    subnet_id=$1
    aws ec2 create-network-interface --subnet-id $subnet_id
}

get_network_interface_id() {
    network_interface_json=$*
    echo $network_interface_json | jq -r .NetworkInterface.NetworkInterfaceId
}

delete_network_interface() {
    network_interface_id=$1
    aws ec2 delete-network-interface --network-interface-id $network_interface_id
}

attach_network_interface() {
    instance_id=$1
    network_interface_id=$2
    device_index=$3

    aws ec2 attach-network-interface --device-index $device_index --instance-id $instance_id --network-interface-id $network_interface_id | jq -r .AttachmentId
}

detach_network_interface() {
    attachment_id=$1
    aws ec2 detach-network-interface --attachment-id $attachment_id
}

setup_network_interface() {
    subnet_id=$1
    network_interface_json=$(create_network_interface $subnet_id)
    get_network_interface_id $network_interface_json
}

teardown_network_interface() {
    attachment_id=$1
    network_interface_id=$2

    detach_network_interface $attachment_id
    sleep 30
    delete_network_interface $network_interface_id
}

perform_eni_route_verification() {
    ec2_inst=$1
    net_file=$2
    eni_numbers="0 1 2"

    for NUMBER in $eni_numbers; do
        eth_name="eth${NUMBER}"
        metric_expected=$(expr `expr $NUMBER + 1` \* 100)
        actual_metric=$(ssh $sshopts $ec2_inst -- cat $net_file | grep -A3 -m1 $eth_name | awk 'NF' | tail -n1 | awk '{print $2}')

        if [ "$metric_expected" = "$actual_metric" ]; then
            echo "route metric is correct"
        else
            echo "Incorrect value for route metric"
            exit 1
        fi
    done
}

count_occurrences_in_file() {
    search_file=$1
    search_pattern=$2
    ssh $sshopts $ec2_inst -- cat $search_file | grep $search_pattern | wc -l
}

perform_only_eth0_route_verification() {
    ec2_inst=$1
    net_file=$2

    metric_count_expected=0
    metric_count_actual=$(count_occurrences_in_file $net_file "metric")

    if [ "$metric_count_expected" = "$metric_count_actual" ]; then
        echo "No metrics as expected"
    else
        echo "Error: metric defined in config"
        exit 1
    fi

    metric_count_expected=2
    metric_count_actual=$(count_occurrences_in_file $net_file "eth0")

    if [ "$metric_count_expected" = "$metric_count_actual" ]; then
        echo "eth0 interface rendered"
    else
        echo "Error: eth0 interface not defined in config"
        exit 1
    fi

    metric_count_expected=0
    metric_count_actual=$(count_occurrences_in_file $net_file "eth[12]")

    if [ "$metric_count_expected" = "$metric_count_actual" ]; then
        echo "No eth1 or eth2 interfaces rendered"
    else
        echo "Error: eth1/eth2 interfaces are rendered"
        exit 1
    fi

}

perform_nic_ordering_test() {
    ec2_inst=$1
    series=$2

    instance_id=$(get_ec2_instance_id $ec2_inst)
    subnet_id=$(get_subnet_id $ec2_inst)

    echo "Creating two nic to test feature..."
    network_interface_id_1=$(setup_network_interface $subnet_id)
    network_interface_id_2=$(setup_network_interface $subnet_id)

    echo "Attaching network interfaces to instance..."
    attachment_id_1=$(attach_network_interface $instance_id $network_interface_id_1 1)
    attachment_id_2=$(attach_network_interface $instance_id $network_interface_id_2 2)
    sleep 60

    ssh $sshopts $ec2_inst -- sudo cloud-init init
    ssh $sshopts $ec2_inst -- ! grep Trace "/var/log/cloud-init*"
    ssh $sshopts $ec2_inst -- sudo cloud-init clean --logs --reboot || true
    sleep 90
    ssh $sshopts $ec2_inst -- cloud-init status --wait --long; date --utc +%s.%N

    net_file=/etc/netplan/50-cloud-init.yaml

    if [ "$series" = "focal" ]; then
        perform_eni_route_verification $ec2_inst $net_file
    elif [ "$series" = "xenial" ]; then
        net_file=/etc/network/interfaces.d/50-cloud-init.cfg
        perform_only_eth0_route_verification $ec2_inst $net_file
    else
        perform_only_eth0_route_verification $ec2_inst $net_file
    fi

    teardown_network_interface $attachment_id_1 $network_interface_id_1
    teardown_network_interface $attachment_id_2 $network_interface_id_2
}

perform_imds_hidden_token_verification() {
    ec2_inst=$1
    search_file=/var/log/cloud-init.log
    search_pattern="'X-aws-ec2-metadata-token'"
    num_token_key=$(count_occurrences_in_file $search_file $search_pattern)

    search_pattern="'X-aws-ec2-metadata-token': 'REDACTED'"
    num_token_key_redacted=$(count_occurrences_in_file $search_file $search_pattern)

    if [ "$num_token_key" = "$num_token_key_redacted" ]; then
        echo "X-aws-ec2-metadata-token are correctly appearing as redacted in logs"
    else
        echo "X-aws-ec2-metadata-token are fully appearing raw in log"
        exit 2
    fi

    search_pattern="'X-aws-ec2-metadata-token-ttl-seconds'"
    num_token_key=$(count_occurrences_in_file $search_file $search_pattern)

    search_pattern="'X-aws-ec2-metadata-token-ttl-seconds': 'REDACTED'"
    num_token_key_redacted=$(count_occurrences_in_file $search_file $search_pattern)

    if [ "$num_token_key" = "$num_token_key_redacted" ]; then
        echo "X-aws-ec2-metadata-token-ttl-seconds are correctly appearing as redacted in logs"
    else
        echo "X-aws-ec2-metadata-token-ttl-seconds are fully appearing raw in log"
        exit 2
    fi
}


for series in $SRU_SERIES; do
    echo "### BEGIN $series"
    EC2_INST=`launch-ec2 --series $series -u sethostname.yaml -t t2.small | awk '/Found/{print $5}'`
    [ -n "$EC2_INST" ] || { echo "Failed to launch ec2 instance!"; exit 1; }
    sleep 60

    trap "terminate_instance ${EC2_INST}" ERR
    ssh $sshopts $EC2_INST -- cloud-init status --wait --long
    ssh $sshopts $EC2_INST -- cat /run/cloud-init/result.json
    ssh $sshopts $EC2_INST -- ! grep Trace "/var/log/cloud-init.*"
    echo "Expect IMDSv2 token headers are being used on all metadata gets. Expect 0 line count"
    ssh $sshopts $EC2_INST --  '[[ 0 = `grep headers /var/log/cloud-init.log  | grep -c -v X-aws` ]] || exit 1'
    ssh $sshopts $EC2_INST -- sudo systemd-analyze
    ssh $sshopts $EC2_INST -- sudo systemd-analyze blame
    ssh $sshopts $EC2_INST -- sudo cloud-init analyze show
    ssh $sshopts $EC2_INST -- ! sudo grep Trace "/var/log/cloud-init*"
    scp $sshopts $PROPOSED_SCRIPT $EC2_INST:
    ssh $sshopts $EC2_INST sudo bash $PROPOSED_SCRIPT 2>&1 | egrep 'cloud-init'
    ssh $sshopts $EC2_INST sudo hostname something-else
    ssh $sshopts $EC2_INST -- sudo cloud-init init
    ssh $sshopts $EC2_INST -- ! grep Trace "/var/log/cloud-init*"
    ssh $sshopts $EC2_INST -- sudo cloud-init clean --logs --reboot || true
    sleep 60
    date --utc +%s.%N
    ssh $sshopts $EC2_INST -- cloud-init status --wait --long; date --utc +%s.%N
    ssh $sshopts $EC2_INST -- hostname
    ssh $sshopts $EC2_INST -- ! grep Trace "/var/log/cloud-init*"
    ssh $sshopts $EC2_INST -- sudo systemd-analyze
    ssh $sshopts $EC2_INST -- sudo cloud-init analyze show
    if [ "$series" = "xenial" ]; then
       echo "--- Expect warning on xenial for jinja because deb DOES NOT have jinja dep."
    else
       echo "--- Expect success on bionic for jinja because deb DOES have jinja dep."
    fi
    ssh $sshopts $EC2_INST "cloud-init query --format 'cloud-region: {{cloud_name}}-{{region}}'"
    
    echo 'Get cloud-id'
    ssh $sshopts $EC2_INST cloud-id

    echo 'Per LP:1863943 we should hide IMDSv2 tokens on the log'
    perform_imds_hidden_token_verification $EC2_INST

    echo 'Per LP:1876312 should route based on device-number not on mac address'
    echo 'Per LP:1866930 should configure other network interfaces from imds data'
    echo 'However LP:1866930 does not apply to Bionic, Eoan and Xenial'
    perform_nic_ordering_test $EC2_INST $series

    echo 'Validating whether metadata is being updated per boot LP:1819913'
    ssh $sshopts $EC2_INST "grep 'Update datasource' /var/log/cloud-init.log"
    ssh $sshopts $EC2_INST sudo reboot || true
    sleep 60
    echo 'After reboot'
    ssh $sshopts $EC2_INST "grep 'Update datasource' /var/log/cloud-init.log"
    terminate_instance $EC2_INST
    echo "### END $series"
done
