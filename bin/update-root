#!/bin/bash

VERBOSITY=0

error() { echo "$@" 1>&2; }
debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }
Usage() {
    cat <<EOF
Usage: ${0##*/} [ options ]

   Configure updates and upgrade system at /.

   options:
      -i | --install PKGLIST    install these packages.
                                either ',' or space delimited
      -u | --upgrade PKGLIST    update the packages in PKGLIST using
                                    apt-get install --upgrade-only
                                special 'all'  means all. (dist-upgrade)
      -A | --add-archive A      add the apt archive via 'apt-add-repository'
                                the string 'RELEASE' will be replaced
                                with the output of 'lsb_release -sc'
      -P | --proposed           enable proposed
           --proxy  PROXY       use proxy during apt download.

    Packages in --upgrade and --install can be either ',' or ' ' delimited.
    The options can be given more than once.

    If no upgrade or install is provided, then 'cloud-init' then
    --upgrade=cloud-init is assumed.  Use explicit 'none' to avoid any
    upgrade or install.
EOF
}

enable_proposed() {
    local rel="" line="" file="/etc/apt/sources.list.d/proposed.list"
    rel=$(lsb_release -sc)
    line=$(awk '$1 == "deb" && $2 ~ /ubuntu.com/ {
          printf("%s %s %s-proposed main universe\n", $1, $2, rel); exit(0) };
          ' "rel=$rel" /etc/apt/sources.list)
    debug 1 "Enabling proposed in $file: $line"
    echo "$line" > "$file" ||
        { error "failed enabling proposed with '$line'"; return 1; }
}

add_archives() {
    local debline="" rel="$(lsb_release -sc)"
    for debline in "$@"; do
        debline=$(echo "$debline" | sed "s,RELEASE,$rel,")
        debug 1 "enabling '$debline' via apt-add-repository"
        apt-add-repository -y "$debline" || return
    done
}

main() {
    local short_opts="aA:hiPu:v"
    local long_opts="add-archive:,help,install:,proposed,proxy:,upgrade:,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur="" next=""
    local upgrade="" install="" proposed="false" archives=""
    local upgrade_in="" install_in=""
    archives=( )

    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            -A|--add-archive) archives[${#archives[@]}]="$next"; shift;;
            -h|--help) Usage ; exit 0;;
            -P|--proposed) proposed=true;;
               --proxy) proxy=$next; shift;;
            -u|--upgrade)
                upgrade_in="${upgrade_in:+${upgrade_in},}$next";
                shift;;
            -i|--install)
                install_in="${install_in:+${install_in},}$next";
                shift;;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
            --) shift; break;;
        esac
        shift;
    done

    [ "$(id -u)" = "0" ] || { error "Not root."; return 1; }
    if [ -z "$upgrade_in" -a -z "$install_in" ]; then
        upgrade="cloud-init"
    else
        upgrade=${upgrade_in}
        install=${install_in}
    fi

    upgrade=$(echo "$upgrade" |
        sed -e 's/,/ /g' -e 's/[ ]\+/ /' -e 's/none //g')
    install=$(echo "$install" |
        sed -e 's/,/ /g' -e 's/[ ]\+/ /' -e 's/none //g')

    export http_proxy=${proxy}
    if [ "$proposed" = "true" ]; then
        enable_proposed || return
    fi
    add_archives "${archives[@]}" || return

    apt-get update -q || return

    export DEBIAN_FRONTEND=noninteractive
    if [ -n "$install" ]; then
        debug 1 "installing: $install"
        apt-get install --quiet --assume-yes $install </dev/null || return
    fi
    if [ "$upgrade" != "none" -a "$upgrade" != "all" ]; then
        debug 1 "upgrading: $upgrade"
        apt-get install --quiet --assume-yes --only-upgrade \
            $upgrade </dev/null || return
    elif [ "$upgrade" = "all" ]; then
        debug 1 "dist-upgrading"
        apt-get dist-upgrade --quiet --assume-yes </dev/null || return
    fi

    return 0
}

# this makes 'bash -s <args> < /path/to/update-root' work more sanely.
[ "$1" = "update_root" -o "$1" = "update-root" ] && shift
main "$@"

# vi: ts=4 expandtab
