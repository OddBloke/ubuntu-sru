#!/bin/bash

VERBOSITY=0
TEMP_D=""

error() { echo "$@" 1>&2; }
rerror() { local r=$?; error "$@"; return $r; }
fail() { local r=$?;  [ $r -eq 0 ] && r=1; failrc "$r" "$@"; }
failrc() { local r=$1; shift; [ $# -eq 0 ] || error "$@"; exit $r; }

Usage() {
    cat <<EOF
Usage: ${0##*/} release

   release is like 'xenial' or 'artful'.

Usage: ${0##*/} [ options ] release [output-name]

   create a proposed cloud image.
    - Downloads an image from http://cloud-images.ubuntu.com/
    - converts it to raw format (from qcow2)
    - creates a -proposed image using the original as a qcow2 backing.
    - updates and installs packages inside.

   release: the ubuntu release ('xenial', 'bionic', ...)
   output: the output filename [defaults to <release>-proposed.img]

   options:
      -i | --install PKGLIST    install these packages.
                                either ',' or space delimited
      -u | --upgrade PKGLIST    update the packages in PKGLIST using
                                    apt-get install --upgrade-only
                                special 'all'  means all. (dist-upgrade)
      -A | --add-archive A      add the apt archive via 'apt-add-repository'
                                the string 'RELEASE' will be replaced
                                with the output of 'lsb_release -sc'
      -p | --publish            publish the result as an image named 'name'
      -P | --proposed           enable proposed

           --raw                create a raw image for the backing image.
                                this means reads do not need to use cpu
                                decompression.

    Packages in --upgrade and --install can be either ',' or ' ' delimited.
    The options can be given more than once.

    If no upgrade or install is provided, then 'cloud-init' then
    --upgrade=cloud-init is assumed.  Use explicit 'none' to avoid any
    upgrade or install.
EOF
}

find_command() {
    local cmd="$1" mydir="${0%/*}" fpath=""
    command -v "$cmd" >/dev/null 2>&1 && _RET="$cmd" && return 0
    [ -x "$mydir/$cmd" ] && _RET="$mydir/$cmd" && return 0
    fpath=$(readlink -f "$0")
    mydir="${fpath%/*}"
    [ -x "$mydir/$cmd" ] && _RET="$mydir/$cmd" && return 0
    return 1
}

sstream_check() {
    local kpath="/usr/share/keyrings/ubuntu-cloudimage-keyring.gpg"
    command -v sstream-query >/dev/null 2>&1 || return
    if [ -f "$kpath" ]; then
        KEYRING="$kpath"
        return 0
    else
        # is it in the default keyring?
        local fprint="4A3CE3CD565D7EB5C810E2B97FF3F408476CF100"
        command -v gpg >/dev/null 2>&1 &&
        gpg --list-public-keys | grep -q "$fprint" &&
            KEYRING="" && return 0
    fi
    return 1
}

sstream_get_image() {
    local release="$1" output="$2" ftype="${3:-disk1.img}"
    local url="http://cloud-images.ubuntu.com/daily/"
    local arch="amd64"
    local ofmt="%(release)s %(version_name)s %(ftype)s %(sha256)s %(item_url)s"
    local out=""
    out=$(sstream-query ${KEYRING:+"--keyring=${KEYRING}"} \
        --max=1 "--output-format=$ofmt" \
        "$url" "datatype=image-downloads" \
        "ftype=$ftype" "release=$release" arch="$arch") ||
        { error "sstream-query failed."; return 1; }
    local rrel version ftype sha256 url sha256r
    set -- $out
    [ $# -eq 5 ] || {
        error "too many fields returned in query (multiple results?): $out";
        return 1;
    }
    rrel="$1"; version="$2"; ftype="$3"; sha256="$4"; rurl="$5"
    download_image "$rurl" "$output" "$sha256" || {
        rerror "Failed download/checksum of $rurl"
        return
    }
}

download_image() {
    local url="$1" output="$2" sha256="$3"
    local tmp="$output.tmp.$$" r=""
    error "Downloading $url to $output${sha256:+ verifying sha256 $sha256}."
    wget --progress=dot:giga "$url" -O "$tmp" || {
        rerror "Failed download of $url"
        rm -f "$tmp"
        return
    }
    if [ -n "$sha256" ]; then
        local out="" sha256r=""
        out=$(sha256sum "$tmp") && sha256r="${out%  *}" || {
            r=$?
            rm -f "$tmp"
            error "checksum of $tmp failed."
            return $r
        }
        [ "${sha256r}" = "$sha256" ] || {
            r=$?
            rm -f "$tmp"
            error "hashsum mismatch (found=$sha256r expected=$sha256)"
            return $r
        }
    fi
    mv "$tmp" "$output"
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }
cleanup() {
    [ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}

main() {
    local short_opts="aA:hiPu:v"
    local long_opts="add-archive:,help,install:,proposed,proxy:,raw,upgrade:,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur="" next="" output="" pt="" vflag="" raw="false"
    pt=( )  # pass through

    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            # any --key=value passthrough
            -A|--add-archive|-u|--upgrade|-i|--install|--proxy)
                pt=( "${pt[@]}" "$cur" "$next" ); shift;;
            # any flag pass through.
            -P|--proposed) pt[${#pt[@]}]="$cur";;
            -h|--help) Usage ; exit 0;;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1))
                vflag="${vflag:--}v";;
            --raw) raw="true";;
            --) shift; break;;
        esac
        shift;
    done

    [ $# -eq 1 -o $# -eq 2 ] || {
        bad_Usage "Got $# args, expected 1 or 2"; return 1;
    }

    release="$1"
    output=$2
    [ "$1" = "-h" -o "$1" = "--help" ] && { Usage; exit 0; }
    [ -n "$release" ] || { Usage 1>&2; error "Must give release"; exit 1; }
    if [ -z "$output" ]; then
        output="${release}-proposed.img"
    fi

    local update_root=""
    find_command "update-root" && update_root="$_RET" || {
        error "Failed to find command 'update-root'."
        return 1
    }

    arch="amd64"
    fname=$release-server-cloudimg-amd64.img
    ofname="$fname"
    case "$release" in
        precise|trusty)
            ofname="$release-server-cloudimg-amd64-disk1.img";;
        xenial)
            ofname="$release-server-cloudimg-amd64-uefi1.img"
            ftype="uefi1.img";;
    esac

    local rawimg="${fname%.img}.raw" backing="$fname"
    if [ ! -f "$fname" ]; then
        if sstream_check; then
            error "getting image via simplestreams to $fname."
            sstream_get_image "$release" "$fname" "$ftype" || exit
        else
            local burl="http://cloud-images.ubuntu.com/daily/server"
            error "No simplestreams, so using wget to get $fname."
            download_image "$burl/$release/current/$ofname" \
                    "$fname" || {
                rerror "Failed download $burl/$release/current/$ofname"
                return
            }
        fi
        rm -f "$rawimg"
    fi

    if [ "$raw" = "true" ]; then
        backing="$rawimg"
        if [ ! -f "$rawimg" -o "$rawimg" -ot "$fname" ]; then
            error "converting $fname to raw in $rawimg."
            qemu-img convert -O raw "$fname" "$rawimg.tmp" &&
                mv "$rawimg.tmp" "$rawimg" || {
                    rerror "Failed convert $fname to raw in $rawimg."
                    return
                }
        fi
    fi
    qemu-img create -f qcow2 -b "$backing" "$output.tmp" || {
        rerror "Failed to create qcow in $output.tmp backed by $backing"
    }
    sudo mount-image-callback --system-resolvconf "$output.tmp" -- \
        mchroot /bin/bash -s update-root $vflag "${pt[@]}" \
            < "$update_root" || return
    mv "$output.tmp" "$output" ||
        { rerror "renaming file to $output failed."; return; }
    error "wrote $output"
}

main "$@"

# vi: ts=4 expandtab
