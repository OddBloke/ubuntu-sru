#!/bin/sh

set -e

SRU_SERIES="%SRU_SERIES%"
PRESERVE_INSTANCE=false

# local values
LP_USER=${LP_USER:-"%SRU_LP_USER%"}

# Provide USE_DEV_PPA=1 if we are SRU queue is still unapproved
# This will use our ppa:cloud-init-dev/proposed
if [ "${USE_DEV_PPA:-0}" -eq "0" ]; then
    PROPOSED_SCRIPT=setup_proposed.sh
else
    PROPOSED_SCRIPT=setup_dev_proposed.sh
fi

while [ $# -ne 0 ]; do
	case "$1" in
		# any flag pass through.
		--preserve-instance) PRESERVE_INSTANCE=true;;
		--) shift; break;;
	esac
	shift;
done

get_ec2_instance_id() {
    dns_name=$1
    dns_name="${dns_name#"ubuntu@"}"
    query='Reservations[].Instances[].InstanceId'
    aws ec2 describe-instances --filter "Name=dns-name,Values=${dns_name}" --query $query | jq -r .[]
}

terminate_instances() {
    ec2_inst=$1
    if [ "$PRESERVE_INSTANCE" = false ]; then
        echo "deleting instance"
        ec2_inst_id=`get_ec2_instance_id ${ec2_inst}`
        aws ec2 terminate-instances --instance-ids $ec2_inst_id
    else
        echo "Keeping instance active"
    fi
}

# Manual EC2 upgrade and clean install validation
cat > sethostname.yaml <<EOF
## template: jinja
#cloud-config
ssh_import_id: [$LP_USER]
hostname: SRU-worked-{{v1.cloud_name}}
EOF

cat > setup_proposed.sh <<EOF
#/bin/bash
mirror=http://archive.ubuntu.com/ubuntu
echo deb \$mirror \$(lsb_release -sc)-proposed main | tee /etc/apt/sources.list.d/proposed.list
apt-get update -q;
apt-get install -qy cloud-init;
EOF

cat > setup_dev_proposed.sh <<EOF
#/bin/bash
add-apt-repository ppa:cloud-init-dev/proposed -y
apt-get update -q;
apt-get install -qy cloud-init;
EOF

# set -x outputs each commant to standard error, so an easy way to keen an eye
# what's going on while saving a clean log file (stdout only) is using tee(1).
set -x

sshopts="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

for series in $SRU_SERIES; do
    echo "### BEGIN $series"
    EC2_INST=`launch-ec2 --series $series -u sethostname.yaml | awk '/Found/{print $5}'`
    [ -n "$EC2_INST" ] || { echo "Failed to launch ec2 instance!"; exit 1; }
    sleep 60

    trap "terminate_instances ${EC2_INST}" ERR
    ssh $sshopts $EC2_INST -- cloud-init status --wait --long
    ssh $sshopts $EC2_INST -- cat /run/cloud-init/result.json
    ssh $sshopts $EC2_INST -- ! grep Trace "/var/log/cloud-init.*"
    echo "Expect IMDSv2 token headers are being used on all metadata gets. Expect 0 line count"
    ssh $sshopts $EC2_INST --  '[[ 0 = `grep headers /var/log/cloud-init.log  | grep -c -v X-aws` ]] || exit 1'
    ssh $sshopts $EC2_INST -- sudo systemd-analyze
    ssh $sshopts $EC2_INST -- sudo systemd-analyze blame
    ssh $sshopts $EC2_INST -- sudo cloud-init analyze show
    ssh $sshopts $EC2_INST -- ! sudo grep Trace "/var/log/cloud-init*"
    scp $sshopts $PROPOSED_SCRIPT $EC2_INST:
    ssh $sshopts $EC2_INST sudo bash $PROPOSED_SCRIPT 2>&1 | egrep 'cloud-init'
    ssh $sshopts $EC2_INST sudo hostname something-else
    ssh $sshopts $EC2_INST -- sudo cloud-init init
    ssh $sshopts $EC2_INST -- ! grep Trace "/var/log/cloud-init*"
    ssh $sshopts $EC2_INST -- sudo cloud-init clean --logs --reboot || true
    sleep 60
    date --utc +%s.%N
    ssh $sshopts $EC2_INST -- cloud-init status --wait --long; date --utc +%s.%N
    ssh $sshopts $EC2_INST -- hostname
    ssh $sshopts $EC2_INST -- ! grep Trace "/var/log/cloud-init*"
    ssh $sshopts $EC2_INST -- sudo systemd-analyze
    ssh $sshopts $EC2_INST -- sudo cloud-init analyze show
    if [ "$series" = "xenial" ]; then
       echo "--- Expect warning on xenial for jinja because deb DOES NOT have jinja dep."
    else
       echo "--- Expect success on bionic for jinja because deb DOES have jinja dep."
    fi
    ssh $sshopts $EC2_INST "cloud-init query --format 'cloud-region: {{cloud_name}}-{{region}}'"
    
    echo 'Per LP:1794399 expect we do not see a lot of killing dhclient logs'
    ssh $sshopts $EC2_INST "grep dhclient /var/log/cloud-init.log"

    echo 'Get cloud-id'
    ssh $sshopts $EC2_INST cloud-id

    echo 'Validating whether metadata is being updated per boot LP:1819913'
    ssh $sshopts $EC2_INST "grep 'Update datasource' /var/log/cloud-init.log"
    ssh $sshopts $EC2_INST sudo reboot || true
    sleep 60
    echo 'After reboot'
    ssh $sshopts $EC2_INST "grep 'Update datasource' /var/log/cloud-init.log"
    terminate_instances $EC2_INST
    echo "### END $series"
done
