=== Begin SRU Template ===
[Impact] 
Azure Gen2 VMs which migrate from one Azure backend server to another
will run into a scenario where dmi data reports byte-swapped DMI product_uuid.

In this scenario, cloud-init should not reprovision the system due to 
New Instance first boot event as cloud-init will have already configured the
VM appropriately.

This fix should avoid re-provisioning when DMI product_uuid on Azure VMs
happen to have byte-swapped ordering for the first 3 segments of the product
UUID.

[Test Case]

#!/bin/sh
set -x
# Manually deploy on Azure using Azure CLI client.
# Fake a byte-swapped cached instance-id and validate that old cloud-init
# fails to return the previous instance-id.  Validate that -proposed cloud-init
# does return the previous IID (to avoid triggering the New instance ID boot
# event
 
# To be adapted to the SRU to test
SRU_SERIES="xenial bionic eoan"

# local values
# find region with az account list-locations -o table
REGION="eastus2"
VNET_NAME="sruVnet"
NETWORK_SECURITY_GROUP="sruNetSecGroup"
NIC_NAME="sruNic"
RESOURCE_GROUP="srugroup"
BOOT_DIAG="storeitsru"
SSH_KEY="$HOME/.ssh/id_rsa.pub"


cat > sethostname.yaml <<EOF
## template: jinja
#cloud-config
ssh_import_id : [chad.smith]
hostname: SRU-worked-{{v1.cloud_name}}
EOF

cat > setup_proposed.sh <<EOF
#/bin/bash
mirror=http://archive.ubuntu.com/ubuntu
echo deb \$mirror \$(lsb_release -sc)-proposed main | tee /etc/apt/sources.list.d/proposed.list
apt-get update -q
apt-get install -qy cloud-init
EOF

cat > byteswap_test.sh <<EOF
#!/usr/bin/python3

from cloudinit.stages import _pkl_load, _pkl_store

import textwrap
def swap_bytestring(s, width=2):
        dd = [byte for byte in textwrap.wrap(s, 2)]
        dd.reverse()
        return ''.join(dd)

def swapped_iid(iid):
    parts = iid.split('-')
    return '-'.join([
        swap_bytestring(parts[0]),
        swap_bytestring(parts[1]),
        swap_bytestring(parts[2]),
        parts[3],
        parts[4]
    ])

# Cache a swapped instance-id so it looks like real product-uuid has swapped
with open('/sys/class/dmi/id/product_uuid', 'r') as stream:
    real_iid = stream.read().strip()
ds =_pkl_load("/var/lib/cloud/instance/obj.pkl")
fake_prev_iid = swapped_iid(ds.get_instance_id())
# persist byte-swapped in /run/cloud-init/.instance-id as stages reads it
with open('/var/lib/cloud/data/instance-id', 'w') as stream:
    stream.write(fake_prev_iid)
ds.metadata['instance-id'] = fake_prev_iid
_pkl_store(ds, "/var/lib/cloud/instance/obj.pkl")

assert ds.get_instance_id() == fake_prev_iid, "Did not swap cached instance-id"
crawled_metadata = ds.crawl_metadata()
assert crawled_metadata['metadata']['instance-id'] == fake_prev_iid, "Crawled metadata didn't return previous IID"
print("SUCCESS")
EOF
chmod 755 byteswap_test.sh


az group create --name $RESOURCE_GROUP --location $REGION

sshopts="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"
for series in $SRU_SERIES; do
    echo "### BEGIN $series"
    netcfg="/etc/netplan/50-cloud-init.yaml"
    case $series in
        xenial) image_version=16.04-DAILY-LTS
                netcfg="/etc/network/interfaces.d/50-cloud-init.cfg";;
        bionic) image_version=18.04-DAILY-LTS;;
        disco) image_version=19.04-DAILY;;
        eoan) image_version=19.10-DAILY;;
        *) echo "!! UPDATE FAMILY CASE STATEMENT !!"; exit 1;;
    esac
    # Note: Gen2 instance types (--size) exhibit byte-swapped values
    name=test-sru-$series
    az vm create --name=$name \
        --image=Canonical:UbuntuServer:$image_version:latest \
        --admin-username=root --admin-username=ubuntu \
        -g $RESOURCE_GROUP --ssh-key-value $SSH_KEY \
        --custom-data sethostname.yaml --size Standard_B1s
    IP=$(az vm list-ip-addresses --name $name | jq -r '.[] | .virtualMachine.network.publicIpAddresses[].ipAddress'| awk '{printf "ubuntu@%s", $1}')

    echo "Created $name: ubuntu@$IP"

    ssh $sshopts $IP -- cloud-init status --wait --long
    scp $sshopts setup_proposed.sh byteswap_test.sh $IP:.
    echo '--- Expect assert byteswap error for current release'
    ssh $sshopts $IP -- sudo ./byteswap_test.sh
    ssh $sshopts $IP -- sudo bash ./setup_proposed.sh 2>&1 | egrep 'cloud-init'
    ssh $sshopts $IP -- dpkg-query --show cloud-init
    ssh $sshopts $IP -- sudo cloud-init clean --logs
    # Setup cached datasource pkl with real product_uuid saved as intance-id
    ssh $sshopts $IP -- sudo cloud-init init --local
    echo '--- Expect SUCCESS byteswap -proposed release'
    ssh $sshopts $IP -- sudo ./byteswap_test.sh
    echo "### END $series"
done

[Regression Potential]
On Azure only, if new _iid logic was broken we could see tracebacks resulting
in failure for cloud-init to initially provision (or upgrade) on Azure.

[Other Info]
Upstream commit at 
https://git.launchpad.net/cloud-init/commit/?id=129b1c4e



